<?xml version="1.0" encoding="utf-8"?>
<!--

////////////////////////////////////////////////////////////////////////////////
//
//	Copyright 2014 Ardisia Labs LLC. All Rights Reserved.
//
//	This file is licensed under the Ardisia Component Library License.
//
//	Only license holders are entitled to use this file subject to the
//	conditions of the license. All other uses are expressly forbidden. Visit
//	http://www.ardisialabs.com to view and purchase a license.
//
//	Apache Flex's source code notices are reproduced below.
//
// 	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:compassContainer="ardisia.components.compassContainer.*"
        clipAndEnableScrolling="true"
        minWidth="50" minHeight="50"
        alpha.disabled="0.5">

    <!-- host component -->
    <fx:Metadata>
        [HostComponent("ardisia.components.compassContainer.CompassContainer")]
    </fx:Metadata>

    <!-- declarations -->
    <fx:Declarations>

        <!-- DividerSkin -->
        <fx:Component className="DividerSkin">
            <s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    minWidth="21" minHeight="28"
                    alpha.disabled="0.5">

                <!-- host component -->
                <fx:Metadata>
					<![CDATA[ [HostComponent("spark.components.Button")] ]]>
				</fx:Metadata>

                <!-- states -->
                <s:states>
                    <s:State name="up" />
                    <s:State name="over" />
                    <s:State name="down" />
                    <s:State name="disabled" />
                </s:states>

                <!--- border & fill -->
                <s:Rect id="border"
                        left="0" right="0" top="0" bottom="0">
                    <s:fill>
                        <s:SolidColor color="#000000"
                                      alpha="0" alpha.over="0.15" alpha.down="0.25"/>
                    </s:fill>
                </s:Rect>

            </s:Skin>
        </fx:Component>

        <!-- CompassMinimizedRegionSkin -->
        <fx:Component className="CompassMinimizedRegionSkin">
            <s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    xmlns:mx="library://ns.adobe.com/flex/mx"
                    alpha.disabled="0.5"
                    minWidth="29" minHeight="29"
                    clipAndEnableScrolling="true">

                <!-- host component -->
                <fx:Metadata>
                    [HostComponent("ardisia.components.compassContainer.CompassMinimizedRegion")]
                </fx:Metadata>

                <!-- scripts -->
                <fx:Script>
					<![CDATA[

                    //----------------------------------
                    //  variables
                    //----------------------------------

                    protected var stylesChanged:Boolean;

                    protected var _borderVisible:Boolean;

                    protected var _borderColor:uint= 0;

                    protected var _borderAlpha:Number = 1;

                    //----------------------------------
                    //  overridden methods
                    //----------------------------------

                    override protected function updateDisplayList(unscaledWidth:Number,
                                                                  unscaledHeight:Number):void
                    {
                        if (_borderVisible)
                        {
                            stroke.alpha = _borderAlpha;
                            stroke.color =_borderColor;
                        }
                        else
                        {
                            stroke.alpha = 0;
                        }

                        super.updateDisplayList(unscaledWidth, unscaledHeight);
                    }

                    override protected function commitProperties():void
                    {
                        super.commitProperties();

                        if (stylesChanged)
                        {
                            stylesChanged = false;

                            _borderVisible = getStyle("borderVisible");
                            _borderColor = getStyle("borderColor");
                            _borderAlpha = getStyle("borderAlpha");

                            invalidateDisplayList();
                        }
                    }

                    override public function styleChanged(styleProp:String):void
                    {
                        super.styleChanged(styleProp);

                        stylesChanged = true;
                        invalidateProperties();
                    }

                    ]]>
				</fx:Script>

                <!-- states -->
                <s:states>
                    <s:State name="east" stateGroups="horizontalGroup"/>
                    <s:State name="west" stateGroups="horizontalGroup"/>
                    <s:State name="north" stateGroups="verticalGroup"/>
                    <s:State name="south" stateGroups="verticalGroup"/>
                    <s:State name="disabled" />
                </s:states>

                <!--- border & background -->
                <s:Rect top="0" right="0" bottom="0" left="0">
                    <s:fill>
                        <s:LinearGradient rotation.north="90" rotation.south="90" rotation.east="0" rotation.west="0">
                            <s:GradientEntry color="#2D2D2D"
                                             ratio="0"/>
                            <s:GradientEntry color="#252525"
                                             ratio="1" />
                        </s:LinearGradient>
                    </s:fill>
                    <s:stroke>
                        <s:SolidColorStroke id="stroke"
                                            color="#6A6A6A"
                                            joints="miter"
                                            caps="square"
                                            weight="1"
                                            pixelHinting="true"/>
                    </s:stroke>
                </s:Rect>

                <!--- inner border -->
                <s:Rect top="1" right="1" bottom="1" left="1">
                    <s:stroke>
                        <s:SolidColorStroke joints="miter"
                                            color="#2F2F2F"
                                            alpha="0.5"
                                            caps="square"/>
                    </s:stroke>
                </s:Rect>

                <!-- skin part -->
                <!--- @optional -->
                <s:Button id="restoreButtonPart"
                          width="19" height="19"
                          top.horizontalGroup="7" right.verticalGroup="6"
                          horizontalCenter.west="0" horizontalCenter.east="0"
                          verticalCenter.verticalGroup="0"
                          rotation.east="90" rotation.west="-90" rotation.south="180" rotation.north="0"
                          skinClass="{Class(RegionMinimizeButtonSkin)}"/>

                <!-- skin part -->
                <!--- @optional -->
                <s:Label id="titleLabelPart"
                         right.verticalGroup="35"
                         top.horizontalGroup="35" left.verticalGroup="9"
                         horizontalCenter.west="0" horizontalCenter.east="-2"
                         verticalCenter.verticalGroup="1"
                         rotation.east="90" rotation.west="-90"
                         fontWeight="bold"
                         maxDisplayedLines="1"/>

            </s:Skin>
        </fx:Component>

        <!-- RegionContainerSkin -->
        <fx:Component className="RegionContainerSkin">
            <s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    alpha.disabledGroup="0.5">

                <!-- host component -->
                <fx:Metadata>
                    [HostComponent("ardisia.components.compassContainer.CompassRegionContainer")]
                </fx:Metadata>

                <!-- states -->
                <s:states>
                    <s:State name="normal" stateGroups="chromeGroup"/>
                    <s:State name="floating" stateGroups="chromeGroup"/>
                    <s:State name="close" stateGroups="chromeGroup,noChromeGroup"/>
                    <s:State name="normalAndNoChrome" stateGroups="noChromeGroup"/>
                    <s:State name="disabled" stateGroups="chromeGroup,disabledGroup"/>
                    <s:State name="disabledAndNoChrome" stateGroups="noChromeGroup,disabledGroup"/>
                </s:states>

                <!-- scripts -->
                <fx:Script>
					<![CDATA[

                    //----------------------------------
                    //  variables
                    //----------------------------------

                    protected var stylesChanged:Boolean;

                    protected var _backgroundColor:Number = 0;

                    protected var _borderVisible:Boolean;

                    protected var _borderColor:uint= 0;

                    protected var _borderAlpha:Number = 1;

                    //----------------------------------
                    //  overridden methods
                    //----------------------------------

                    override protected function updateDisplayList(unscaledWidth:Number,
                                                                  unscaledHeight:Number):void
                    {
                        if (background && fill)
                        {
                            fill.color = _backgroundColor;
                        }

                        if (_borderVisible)
                        {
                            border.visible = true;
                            stroke.alpha = _borderAlpha;
                            stroke.color =_borderColor;

                            if (background)
                                background.top = background.right = background.bottom = background.left = 1;
                            if (draggingRegionPart)
                                draggingRegionPart.top = draggingRegionPart.right = draggingRegionPart.left = 1;
                        }
                        else
                        {
                            border.visible = false;

                            if (background)
                                background.top = background.right = background.bottom = background.left = 0;
                            if (draggingRegionPart)
                                draggingRegionPart.top = draggingRegionPart.right = draggingRegionPart.left = 0;
                        }

                        super.updateDisplayList(unscaledWidth, unscaledHeight);

                        if (_borderVisible)
                        {
                            contentGroup.setLayoutBoundsSize(contentGroup.getLayoutBoundsWidth() - 2,
                                    contentGroup.getLayoutBoundsHeight() - 2);
                            contentGroup.setLayoutBoundsPosition(contentGroup.getLayoutBoundsX() + 1,
                                    contentGroup.getLayoutBoundsY() + 1);
                        }
                    }

                    override protected function commitProperties():void
                    {
                        super.commitProperties();

                        if (stylesChanged)
                        {
                            stylesChanged = false;

                            _backgroundColor = getStyle("backgroundColor");
                            _borderVisible = getStyle("borderVisible");
                            _borderColor = getStyle("borderColor");
                            _borderAlpha = getStyle("borderAlpha");

                            invalidateDisplayList();
                        }
                    }

                    override public function styleChanged(styleProp:String):void
                    {
                        super.styleChanged(styleProp);

                        stylesChanged = true;
                        invalidateProperties();
                    }

                    ]]>
				</fx:Script>

                <!-- transitions -->
                <s:transitions>
                    <s:Transition fromState="*" toState="close" >
                        <!--- Fade always throws error -->
                        <s:Animate target="{this}" duration="250">
                            <s:SimpleMotionPath property="alpha"
                                                valueFrom="1" valueTo="0"/>
                        </s:Animate>
                    </s:Transition>
                </s:transitions>

                <!--- background -->
                <s:Rect id="background"
                        left="0" right="0" top="0" bottom="0">
                    <s:fill>
                        <s:SolidColor id="fill"
                                      color="#FFFFFF" alpha="0" />
                    </s:fill>
                </s:Rect>

                <!-- skin part -->
                <!--- optional -->
                <s:Group id="draggingRegionPart"
                         includeIn="chromeGroup"
                         left="0" top="0" right="0"
                         height="29"
                         minWidth="0" minHeight="0">

                    <s:Rect top="0" right="0" bottom="0" left="0">
                        <s:fill>
                            <s:LinearGradient rotation="90">
                                <s:GradientEntry color="#2D2D2D"
                                                 ratio="0"/>
                                <s:GradientEntry color="#252525"
                                                 ratio="1" />
                            </s:LinearGradient>
                        </s:fill>
                    </s:Rect>

                    <!-- skin part -->
                    <!--- @optional -->
                    <s:Label id="titleLabelPart"
                             verticalCenter="1"
                             left="9" right="45"
                             fontWeight="bold"
                             maxDisplayedLines="1"/>

                    <s:HGroup visible.floating="false"
                              gap="-1"
                              right="6"
                              verticalCenter="0"
                              verticalAlign="middle">

                        <!-- skin part -->
                        <!--- @optional -->
                        <s:Button id="minimizeButtonPart"
                                  width="19" height="19"
                                  skinClass="{Class(RegionMinimizeButtonSkin)}"/>

                        <!-- skin part -->
                        <!--- @optional -->
                        <s:Button id="closeButtonPart"
                                  width="19" height="19"
                                  skinClass="{Class(RegionCloseButtonSkin)}"/>
                    </s:HGroup>

                </s:Group>

                <!-- skin part -->
                <!--- @required -->
                <!--- clip so content will be hidden if overflows out of container on user drag resize -->
                <s:Group id="contentGroup"
                         minWidth="0" minHeight="0"
                         top="0" right="0" top.chromeGroup="29" bottom="0" left="0"
                         top.normalAndNoChrome="0" top.disabledAndNoChrome="0"
                         right.normalAndNoChrome="0" right.disabledAndNoChrome="0"
                         bottom.normalAndNoChrome="0" bottom.disabledAndNoChrome="0"
                         left.normalAndNoChrome="0" left.disabledAndNoChrome="0"
                         clipAndEnableScrolling="true"/>

                <!--- ensures there is a border for flyout -->
                <s:Rect includeIn="floating"
                        left="0" right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:SolidColorStroke color="#1A1A1A"
                                            pixelHinting="true"
                                            joints="miter" />
                    </s:stroke>
                </s:Rect>

                <s:Rect id="border"
                        left="0" right="0" top="0" bottom="0">
                    <s:stroke>
                        <s:SolidColorStroke id="stroke"
                                            pixelHinting="true"
                                            joints="miter" />
                    </s:stroke>
                </s:Rect>

            </s:Skin>
        </fx:Component>

        <!-- RegionCloseButtonSkin -->
        <fx:Component className="RegionCloseButtonSkin">
            <s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                    xmlns:s="library://ns.adobe.com/flex/spark"
                    alpha.disabled="0.5"
                    minWidth="16" minHeight="16">

                <!-- host component -->
                <fx:Metadata>
					<![CDATA[ [HostComponent("spark.components.Button")] ]]>
				</fx:Metadata>

                <!-- states -->
                <s:states>
                    <s:State name="up" />
                    <s:State name="over"/>
                    <s:State name="down" />
                    <s:State name="disabled" />
                </s:states>

                <!--- include to fire mouse events -->
                <s:Rect top="0" right="0" bottom="0" left="0"
                        alpha.up="0">
                    <s:stroke>
                        <s:SolidColorStroke weight="1"
                                            color="#5F5F5F" color.down="#3F3F3F"/>
                    </s:stroke>
                    <s:fill>
                        <s:SolidColor color="#FCFCFC" color.down="#C1C1C1"/>
                    </s:fill>
                    <s:filters>
                        <s:GlowFilter blurX="3" blurY="3"
                                      color="#000000"
                                      alpha="0.35" alpha.down="0"/>
                    </s:filters>
                </s:Rect>

                <s:Path horizontalCenter="0" verticalCenter="0"
                        data="M 0 0 L 5 5 M 0 5 L 5 0">
                    <s:stroke>
                        <s:SolidColorStroke weight="2"
                                            color="#000000"
                                            pixelHinting="false"
                                            caps="square"
                                            joints="round"/>
                    </s:stroke>
                </s:Path>

            </s:Skin>
        </fx:Component>

        <!-- RegionMinimizeButtonSkin -->
        <fx:Component className="RegionMinimizeButtonSkin">
            <s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                               xmlns:s="library://ns.adobe.com/flex/spark"
                               alpha.disabled="0.5"
                               minWidth="16" minHeight="16">

                <!-- host component -->
                <fx:Metadata>
					<![CDATA[ [HostComponent("spark.components.Button")] ]]>
				</fx:Metadata>

                <!-- states -->
                <s:states>
                    <s:State name="up" />
                    <s:State name="over" />
                    <s:State name="down" />
                    <s:State name="disabled" />
                </s:states>

                <!--- include to fire mouse events -->
                <!--- no gradient due to rotation -->
                <s:Rect top="0" right="0" bottom="0" left="0"
                        alpha.up="0">
                    <s:fill>
                        <s:SolidColor color="#000000" alpha="0.2"/>
                    </s:fill>
                    <s:filters>
                        <s:GlowFilter blurX="3" blurY="3"
                                      color="#000000"
                                      alpha="0.35"
                                      alpha.down="0"/>
                    </s:filters>
                </s:Rect>

                <!--- arrow -->
                <s:Path horizontalCenter="0" verticalCenter="0"
                        data="M 0 0 L 2.5 2.5 L 5 0
							  M 0 5 L 2.5 7.5 L 5 5">
                    <s:stroke>
                        <s:SolidColorStroke weight="2"
                                            color="#FFFFFF"
                                            pixelHinting="false"
                                            caps="square"
                                            joints="round"/>
                    </s:stroke>
                </s:Path>

            </s:SparkButtonSkin>
        </fx:Component>

        <!-- skin part -->
        <!--- @required -->
        <fx:Component id="HDividerFactoryPart">
            <s:Button skinClass="{Class(DividerSkin)}"/>
        </fx:Component>

        <!-- skin part -->
        <!--- @required -->
        <fx:Component id="VDividerFactoryPart">
            <s:Button skinClass="{Class(DividerSkin)}"/>
        </fx:Component>

        <!-- skin part -->
        <!--- @required -->
        <fx:Component id="regionContainerFactoryPart">
            <compassContainer:CompassRegionContainer skinClass="{Class(RegionContainerSkin)}"/>
        </fx:Component>

        <!-- skin part -->
        <!--- @required -->
        <fx:Component id="minimizedRegionFactoryPart">
            <compassContainer:CompassMinimizedRegion skinClass="{Class(CompassMinimizedRegionSkin)}"/>
        </fx:Component>

    </fx:Declarations>

    <!-- states -->
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>

</s:Skin>
