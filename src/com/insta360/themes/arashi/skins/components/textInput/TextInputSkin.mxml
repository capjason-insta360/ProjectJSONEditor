<?xml version="1.0" encoding="utf-8"?>
<!--

////////////////////////////////////////////////////////////////////////////////
//	
//	Copyright 2014 Ardisia Labs LLC. All Rights Reserved.
//
//	This file is licensed under the Ardisia Component Library License. 
//
//	Only license holders are entitled to use this file subject to the  
//	conditions of the license. All other uses are expressly forbidden. Visit 
//	http://www.ardisialabs.com to view and purchase a license.
//
//	Apache Flex's source code notices are reproduced below.
//
// 	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
	    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" 
	    blendMode="normal"
		minHeight="23" minWidth="30"
		alpha.disabledStates="0.5">

	<!-- host component -->
	<fx:Metadata>
    	<![CDATA[ [HostComponent("spark.components.TextInput") ]]]>
    </fx:Metadata> 
    
	<fx:Script fb:purpose="styling">
	<![CDATA[
		
		//--------------------------------------
		//  variables
		//--------------------------------------
	    
		private var paddingChanged:Boolean;
		
		protected var stylesDirty:Boolean;
		
		protected var _borderColor:uint;
		
		protected var _borderAlpha:Number;
	    
		//--------------------------------------
		//  overridden methods
		//--------------------------------------
	    
	   override protected function commitProperties():void
	    {
	        super.commitProperties();
	        
	        if (paddingChanged)
	        {
	            updatePadding();
	            paddingChanged = false;
	        }
			
			if (stylesDirty)
			{
				stylesDirty = false;
				
				_borderColor = getStyle("borderColor");
				_borderAlpha = getStyle("borderAlpha");
				
				invalidateDisplayList();
			}
	    }
	    
		override protected function updateDisplayList(unscaledWidth:Number, 
													  unscaledHeight:Number):void
	    {
	        if (promptDisplay)
	        {
	            promptDisplay.setLayoutBoundsSize(unscaledWidth - 2, unscaledHeight - 2);
	            promptDisplay.setLayoutBoundsPosition(1, 1);
	        }
			
			if (stroke)
			{
				stroke.color = _borderColor;
				stroke.alpha = _borderAlpha; 
			}
	        
	        super.updateDisplayList(unscaledWidth, unscaledHeight);
	    }
		
		override public function styleChanged(styleProp:String):void
		{
			var allStyles:Boolean = !styleProp || styleProp == "styleName";
			
			super.styleChanged(styleProp);
			
			if (allStyles || styleProp.indexOf("padding") == 0)
			{
				paddingChanged = true;
				invalidateProperties();
			}
			
			stylesDirty = true;
			invalidateProperties();
		}
	
		//--------------------------------------
		//  methods
		//--------------------------------------
	    
		private function updatePadding():void
	    {
	        if (!textDisplay)
	            return;
	        
	        // Push padding styles into the textDisplay
	        var padding:Number;
	        
	        padding = getStyle("paddingLeft");
	        if (textDisplay.getStyle("paddingLeft") != padding)
	            textDisplay.setStyle("paddingLeft", padding);
	        
	        padding = getStyle("paddingTop");
	        if (textDisplay.getStyle("paddingTop") != padding)
	            textDisplay.setStyle("paddingTop", padding);
	        
	        padding = getStyle("paddingRight");
	        if (textDisplay.getStyle("paddingRight") != padding)
	            textDisplay.setStyle("paddingRight", padding);
	        
	        padding = getStyle("paddingBottom");
	        if (textDisplay.getStyle("paddingBottom") != padding)
	            textDisplay.setStyle("paddingBottom", padding);
	        
	        if (!promptDisplay)
	            return;
	        
	        padding = getStyle("paddingLeft");
	        if (promptDisplay.getStyle("paddingLeft") != padding)
	            promptDisplay.setStyle("paddingLeft", padding);
	        
	        padding = getStyle("paddingTop");
	        if (promptDisplay.getStyle("paddingTop") != padding)
	            promptDisplay.setStyle("paddingTop", padding);
	        
	        padding = getStyle("paddingRight");
	        if (promptDisplay.getStyle("paddingRight") != padding)
	            promptDisplay.setStyle("paddingRight", padding);
	        
	        padding = getStyle("paddingBottom");
	        if (promptDisplay.getStyle("paddingBottom") != padding)
	            promptDisplay.setStyle("paddingBottom", padding);
	    }
	
	   ]]>
	</fx:Script>
    
	<!-- states -->
    <s:states>
        <s:State name="normal"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="normalWithPrompt"/>
        <s:State name="disabledWithPrompt" stateGroups="disabledStates"/>
    </s:states>
    
	<!--- border and fill --> 
	<s:Rect left="0" right="0" top="0" bottom="0" radiusX="3" radiusY="3">
		<s:stroke>
			<s:SolidColorStroke id="stroke"
								pixelHinting="true"/>
		</s:stroke>
		<s:fill>
			<s:SolidColor color="#282828" />
		</s:fill>
	</s:Rect>
	
	<!-- skin part -->
	<!--- @optional -->
	<!--- padding is required to get the baseline correct form layout -->
	<s:RichEditableText id="textDisplay"
						right="5" left="5"
						verticalCenter="1"
						widthInChars="10"
						lineBreak="explicit"
						multiline="false"/>
	
	<!-- skin part -->
	<!--- @optional -->
	<s:Label id="promptDisplay" 
			 right="5" left="5"
			 verticalCenter="1"
			 includeIn="normalWithPrompt,disabledWithPrompt" 
			 maxDisplayedLines="1"
			 mouseEnabled="false" mouseChildren="false"
			 includeInLayout="false"/>

</s:Skin>
